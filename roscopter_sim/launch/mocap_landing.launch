<?xml version="1.0"?>
<launch>
  <arg name="drone_name"          default="ragnarok"/>
  <arg name="mav_name"            default="multirotor"/>
  <arg name="target_name"         default="platform"/>
  <arg name="target_x"            default="0.0"/>
  <arg name="target_y"            default="0.0"/>
  <arg name="target_z"            default="0.1"/>
  <arg name="color"               default="White"/>
  <arg name="x"                   default="0"/>
  <arg name="y"                   default="0"/>
  <arg name="z"                   default="0.4"/>
  <arg name="yaw"                 default="0"/>
  <arg name="debug"               default="false"/>

  <!-- Start Simulator -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="paused" value="false"/>
    <arg name="gui" value="true"/>
    <arg name="verbose" value="false"/>
    <arg name="debug" value="$(arg debug)"/>
  </include>

  <!-- Spawn Platform and Multirotor Models in Gazebo -->
  <include file="$(find roscopter_sim)/launch/spawn_target.launch">
    <arg name="target_name"         value="$(arg target_name)" />
    <arg name="model"               value="$(find roscopter_sim)/xacro/$(arg target_name).urdf.xacro" />
    <arg name="x"                   value="$(arg target_x)"/>
    <arg name="y"                   value="$(arg target_y)"/>
    <arg name="z"                   value="$(arg target_z)"/>
    <arg name="yaw"                 value="$(arg yaw)"/>
    <arg name="color"               value="Black"/>
  </include>

  <include file="$(find roscopter_sim)/launch/spawn_mav.launch">
    <arg name="mav_name"            value="$(arg mav_name)" />
    <arg name="model"               value="$(find roscopter_sim)/xacro/$(arg mav_name).urdf.xacro" />
    <arg name="x"                   value="$(arg x)"/>
    <arg name="y"                   value="$(arg y)"/>
    <arg name="z"                   value="$(arg z)"/>
    <arg name="yaw"                 value="$(arg yaw)"/>
    <arg name="color"               value="$(arg color)"/>
  </include>

  <!-- simulation specific ros handling -->
  <group ns="sim">
    <rosparam command="load" file="$(find roscopter)/params/$(arg drone_name).yaml"/>
    <node name="mocap_sim_manager" pkg="roscopter_sim" type="mocap_sim_ros.py" output="screen">
      <rosparam command="load" file="$(find roscopter)/params/$(arg drone_name).yaml"/>
      <!-- Inputs -->
      <remap from="drone_odom" to="/$(arg mav_name)/ground_truth/odometry/NWU"/>  
      <remap from="platform_odom" to="/$(arg target_name)/odom"/> 
    </node>
  </group>


  <group ns="m2u"> <!--m2u = motion capture to ublox conversion-->
    <!-- Load common parameters -->
    <rosparam command="load" file="$(find roscopter)/params/mocap2ublox.yaml"/>
    <node name="mocap2ublox" pkg="roscopter" type="mocap2ublox_ros.py" output="screen">
      <remap from="rover_mocap" to="/sim/rover_mocap"/>
      <remap from="base_mocap" to="/sim/base_mocap"/>
    </node>
  </group>


  <!-- Platform Movement-->
  <group ns="$(arg target_name)">
    <!-- Load common parameters -->
    <rosparam command="load" file="$(find roscopter_sim)/params/$(arg target_name).yaml"/>

    <!-- Platform Velocity Manager -->
    <node name="platform_manager" pkg="roscopter" type="platform_manager.py" output="screen"/>

    <!-- <node name="landing_error" pkg="roscopter" type="landing_error.py" output="screen">
      <remap from="odom" to="/odom"/>
      <remap from="drone_odom" to="/$(arg drone_name)/odom"/>
    </node> -->
  
  </group>

  <!-- Controller -->
  <group ns="$(arg mav_name)">

    <!-- Load common parameters -->
    <rosparam command="load" file="$(find roscopter_sim)/params/$(arg drone_name).yaml"/>
    <rosparam command="load" file="$(find roscopter)/params/$(arg drone_name).yaml"/>

    <!-- Is Flying Publisher -->
    <node pkg="rostopic" type="rostopic" name="is_flying_pub" args="pub is_flying std_msgs/Bool true"/>

    <!-- Status Publisher -->
    <node pkg="rostopic" type="rostopic" name="status_pub" args="pub -r 1 status rosflight_msgs/Status '{armed: true, failsafe: false, rc_override: false, offboard: true, error_code: 0, num_errors: 0, loop_time_us: 1}'"/>

    <!-- PID Position Controller -->
    <node name="controller" pkg="roscopter" type="controller_node" output="screen">
      <remap from="base_odom" to="/platform/odom"/>
      <remap from="estimate" to="odom"/>
      <remap from="waypoint" to="high_level_command"/>
    </node>

    <!-- Waypoint Manager -->
    <rosparam command="load" file="$(find roscopter)/params/waypoints.yaml"/>
    <node name="waypoint_manager" pkg="roscopter" type="waypoint_manager.py" output="screen">
      <remap from="state" to="odom"/>
      <remap from="base_relative_pos" to="base_relPos"/>
      <remap from="base_odom" to="/platform/odom"/>
    </node>

    <!--Estimator-->
    <node name="estimator" pkg="roscopter" type="ekf_node" output="screen">
      <param name="param_filename" value="$(find roscopter_sim)/params/ekf.yaml"/>
      <!--Inputs-->
      <remap from="imu" to="imu/data"/>
      <!-- <remap from="reference" to="ground_truth/odometry/NED_throttled"/> -->
      <!-- <remap from="gnss" to="gps/data"/> -->
      <remap from="ublox_gnss" to="/m2u/rover_PosVelEcef"/>
      <remap from="ublox_relpos" to="/m2u/rover_relpos"/>
      <!-- <remap from="ublox_base_posvelecef" to="/m2u/base_PosVelEcef"/> -->
      <!--Outputs-->
      <remap from="is_flying" to="not_for_sim"/>
    </node>
  </group>

  <!--Throttle ground truth for use in the estimator. Estimator cant handle 1000hz-->
  <node name="truth_throttler" type="throttle" pkg="topic_tools" args="messages /$(arg drone_name)/ground_truth/odometry/NED 100 /$(arg drone_name)/ground_truth/odometry/NED_throttled" />

  <node pkg="rosbag" type="record" name="record" output="screen" args="-O ../data/boatLanding_sim/sim.bag --all"/>

</launch>
